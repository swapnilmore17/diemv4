import os
import sys
import logging
import time
import datetime
import uuid
import traceback

from main import Main

class Validator(process):

    def setup(id, validator_list,validator_index,f_nodes):
        try:

            self.main = Main(validator_list,validator_index,f_nodes)
            self.validator_id = id
            self.validator_list = validator_list
            self.validator_index = validator_index
            self.f_nodes=f_nodes
        except:
            
            traceback.print_exc()

    def run():
        
        

        main.pacemaker.run_done = False
        while not main.pacemaker.run_done:
            main.pacemaker.round_done = False
            timer_duration = main.pacemaker.get_round_timer(main.pacemaker.current_round)
            if await(main.pacemaker.round_done): pass
            elif timeout(timer_duration): main.pacemaker.local_timeout_round()
        #print(True)

    #wait for next event and call event processing

    def receive(msg=('proposal_message',message)):
        x = main.process_proposal_message(message,main.pacemaker.current_round)
        if x:
            message,leader=x
            send(('vote_message',message),to=validator_list[leader])
    
    def receive(msg=('vote_message',message)):
        message = main.process_vote_message(message)
        
        if message:
            for x in validator_list:
                send(('proposal_message',message),to=x)
            
        #send(('proposal_message',message),to=validator_list)
    
    def receive(msg=('timeout_message',message)):
        message = main.process_timeout_message(message)
        
        if message:
            for x in validator_list:
                send(('proposal_message',message),to=x)
        #send(('proposal_message',message),to=validator_list)

    def receive(msg=('client_transactions',message)):
        main.mempool.add_transactions(message)
        output('Client message received')

    '''
    Procedure start event processing(M)
        if M is a local timeout then Pacemaker.local timeout round() if M is a proposal message then process proposal msg(M)
        if M is a vote message then process vote msg(M)
        if M is a timeout message then process timeout message(M)
'''


