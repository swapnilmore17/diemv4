import os
import sys
import logging
import time
import datetime
import uuid
import traceback
config(channel is {fifo, reliable}, clock is lamport)

class Validator(process):

    def setup(config):
        self.id = config['id']

        #setup main, Pacemaker??
        #
        
    def run():
        Pacemaker.run_done = False
        while not Pacemaker.run_done:
            Pacemaker.round_done = False
            timer_duration = Pacemaker.get_round_timer(Pacemaker.current_round)
            await Pacemaker.round_done: pass
            timeout timer_duration: Pacemaker.local_timeout_round()


    def receive(msg=('local_time_out',msg)):
        Pacemaker.local_time_out()

    def receive(msg=('proposal_message',msg)):
        x = Main.process_proposal_message(msg,Pacemaker.current_round)
        if x:
            msg,leader=x
            send(('vote_message',msg),to=leader)
    
    def receive(msg=('vote_message',msg)):
        msg = Main.process_vote_message(msg)
        if msg:
            send(('proposal_message',msg),to=#all validators)
    
    def receive(msg=('timeout_message',msg)):
        msg = Main.process_timeout_message(msg)
        if msg:
            send(('proposal_message',msg),to=#all validators)


