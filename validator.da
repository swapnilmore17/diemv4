import os
import sys
import logging
import time
import datetime
import uuid
import traceback
from mempool import Mempool
from pacemaker import Pacemaker
from main import Main


config(channel is {fifo, reliable}, clock is lamport)

class Validator(process):

    def setup(config, validator_list):
        self.main = Main()
        self.id = config['id']
        self.validator_list = validator_list

    def run():
        main.pacemaker.run_done = False
        while not main.pacemaker.run_done:
            main.pacemaker.round_done = False
            timer_duration = main.pacemaker.get_round_timer(main.pacemaker.current_round)
            await(main.pacemaker.round_done): pass
            timeout (timer_duration): main.pacemaker.local_timeout_round()

    #wait for next event and call event processing
    def receive(msg=('done',)from_=p):
        main.pacemaker.round_done=True

    def receive(msg=('proposal_message',message)):
        x = main.process_proposal_message(message,main.pacemaker.current_round)
        if x:
            message,leader=x
            send(('vote_message',message),to=leader)
    
    def receive(msg=('vote_message',message)):
        message = main.process_vote_message(message)
        if message:
            send(('proposal_message',message),to=validator_list)
    
    def receive(msg=('timeout_message',message)):
        message = main.process_timeout_message(message)
        if message:
            send(('proposal_message',message),to=validator_list)


