from blocktree import Block
from datastructs import TC, ProposalMsg
from validator import Validator
from client import Client
import uuid
import json
from blocktree import QC
from blocktree import VoteInfo
from blocktree import LedgerCommitInfo

config(channel='fifo')

def main():
    
    #read config file

    data = json.load(open('config1.json',))
    print(data['config'])
    nprocs = data['config']['validators']
    f_nodes = data['config']['f_nodes']
    n_messages = data['config']['messages']

    validator_set = new(Validator,num=nprocs)
    validator_list = list(validator_set)
    validator_set_id = [uuid.uuid4() for x in range(len(validator_set))]
    client = new(Client)
    setup(client,[uuid.uuid4(),validator_list,f_nodes,n_messages])
    start(client)
    
    for i in range(len(validator_list)): 
        setup(validator_list[i],[validator_set_id[i],validator_set,i,f_nodes])
    start(validator_set)
    #client_config = {}
    
    
    print('Genesis Block')
    last_round_tc = TC(0,0,None)
    high_commit_qc = QC(
    VoteInfo(1,0,1,0,0),
    LedgerCommitInfo('str','str'),
    [],
    'str'
    )
    block = Block("First",0,"Message0",high_commit_qc,"1")
    print('Genesis Block')
    first_proposal = ProposalMsg(block,last_round_tc,high_commit_qc)
    for x in validator_set:
        send(('proposal_message',first_proposal),to=x) 